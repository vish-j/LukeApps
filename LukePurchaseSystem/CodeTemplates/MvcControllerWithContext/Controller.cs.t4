<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#
string auditVariableName = "";
string routePrefix;
string boolType = "System.Boolean";
string datetimeType = "System.DateTime";

if (String.IsNullOrEmpty(AreaName)) 
{
    routePrefix = ControllerRootName;
}
else
{
    routePrefix = AreaName + "/" + ControllerRootName;
}
#>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="AreaName" #>
<#@ parameter type="System.String" name="ContextTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.String" name="EntitySetVariable" #>
<#@ parameter type="System.Boolean" name="UseAsync" #>
<#@ parameter type="System.Boolean" name="IsOverpostingProtectionRequired" #>
<#@ parameter type="System.String" name="BindAttributeIncludeText" #>
<#@ parameter type="System.String" name ="OverpostingWarningMessage" #>
<#@ parameter type="System.Collections.Generic.HashSet<System.String>" name="RequiredNamespaces" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using BApps.GenericRepository;
using BApps.Controllers;
using System.Linq;
<# if (UseAsync) { #>
using System.Threading.Tasks;
<# } #>
using System.Net;
using System.Web;
using System.Web.Mvc;

using System.Data.Entity.SqlServer;

<# foreach (var namespaceName in RequiredNamespaces) { #>
using <#= namespaceName #>;
<# } #>
using BApps.Authorization.RoleMap;
using BApps.Authorization.Attributes;
using BApps.Common.Attributes;
using BApps.Common.Helpers;
using BApps.Utility;
namespace <#= Namespace #>
{
<#
	
    var contextTypeName = ContextTypeName;
    var entitySetName = ModelMetadata.EntitySetName;
    var entitySetVar = EntitySetVariable ?? (String.IsNullOrEmpty(entitySetName) ? entitySetName : (entitySetName.Substring(0, length:1).ToLowerInvariant() + entitySetName.Substring(1)));
    var primaryKeyName = ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyDefaultValue = ModelMetadata.PrimaryKeys[0].DefaultValue;
    var primaryKeyType = ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyNullableTypeName = GetNullableTypeName(primaryKeyType, primaryKeyShortTypeName);
    var lambdaVar = ModelVariable[0];
    var relatedProperties = ModelMetadata.RelatedEntities.ToDictionary(item => item.AssociationPropertyName);
	IEnumerable<PropertyMetadata> properties = ModelMetadata.Properties;

    string bindAttribute;
    if (IsOverpostingProtectionRequired)
    {
        bindAttribute = String.Format("[Bind(Include = \"{0}\")] ", BindAttributeIncludeText);
    }
    else
    {
        bindAttribute = String.Empty;
    }
	string[] PrimeID = BindAttributeIncludeText.Split(',');
#>	
    public class <#= ControllerName #> : ExtendedController
    {
        private GenericRepository<<#= ContextTypeName #>, <#= ModelTypeName #>> repo;
		
		public <#= ControllerName #>() =>
			repo = new GenericRepository<<#= ContextTypeName #>, <#= ModelTypeName #>>(System.Web.HttpContext.Current.User.Identity.Name);		
		

		public <#= ControllerName #>(string Username) =>
			repo = new GenericRepository<<#= ContextTypeName #>, <#= ModelTypeName #>>(Username);		
		

        // GET: <#= routePrefix #>
		[HttpGet]
		[AuthorizeRoles(Role.Dev)]
        public ActionResult Index(string ErrorMessage = null, long? id = null)
        {
			BuildViewBag(ErrorMessage, id);
			return View();
        }

		//fast json export to client
		[HttpGet]
		[AjaxOnly]
		[AuthorizeRoles(Role.Dev)]
<#		if (UseAsync) { #>
		public async Task<JsonResult> GetJSON()
		{
<# } else { #>
		public JsonResult GetJSON()
		{
<# } #>
<#  var includeExpressions = "";
        includeExpressions = String.Join("", relatedProperties.Values.Select(property => String.Format(".Include({0} => {0}.{1})", lambdaVar, property.AssociationPropertyName)));
#>
<# if(!String.IsNullOrEmpty(includeExpressions)) { #>
			<#		if (UseAsync) { #>
				var <#= entitySetVar #> = await repo.GetAll()<#= includeExpressions #>.ToListAsync();
			<#		} else { #>
				var <#= entitySetVar #> = repo.GetAll()<#= includeExpressions #>.ToList();
			<#		} #>

            var detailCollection = <#= entitySetVar #>.Select(<#= lambdaVar #> => new
			{
				<#
				
					foreach (PropertyMetadata property in properties) {
						if(property.PropertyName == "AuditDetail"){
						auditVariableName = property.PropertyName;
						continue;
						}
						if (property.IsAssociation) {
						continue;
						}
						if (property.IsEnum){
						#>
						
						<#= property.PropertyName #> = <#= lambdaVar #>.<#= property.PropertyName #>.GetDisplay(),
						<#
						}
						else if (property.TypeName.Equals(datetimeType)){
				#>
							<#= property.PropertyName #> = <#= lambdaVar #>.<#= property.PropertyName #>.ToShortDateISO(),
						<# } else if (property.TypeName.Equals(boolType)) { #>
							<#= property.PropertyName #> = (<#= lambdaVar #>.<#= property.PropertyName #> == null) ? "Not Applicable" : ((bool)<#= lambdaVar #>.<#= property.PropertyName #> ? "Yes" : "No"),
						<# } else { #>
							<#= property.PropertyName #> = <#= lambdaVar #>.<#= property.PropertyName #>,
					<# } #>
				<# } #>
				<#= auditVariableName #>_CreatedDate = <#= lambdaVar #>.<#= auditVariableName #>.CreatedDate.ToShortDateISO(),
                <#= auditVariableName #>_CreatedEntryUser = <#= lambdaVar #>.<#= auditVariableName #>.CreatedEntryUserDisplayName,
                <#= auditVariableName #>_LastModifiedDate = <#= lambdaVar #>.<#= auditVariableName #>.LastModifiedDate?.ToShortDateISO(),
                <#= auditVariableName #>_LastModifiedEntryUser = <#= lambdaVar #>.<#= auditVariableName #>.LastModifiedEntryUserDisplayName
			});
				
				
<# } else { #>
				<# if(UseAsync) { #>
				var <#= entitySetVar #> = await repo.GetAll()<#= includeExpressions #>.ToListAsync();
				<#		} else { #>
				var <#= entitySetVar #> = repo.GetAll()<#= includeExpressions #>.ToList();
				<# } #>
			            var detailCollection = <#= entitySetVar #>.Select(<#= lambdaVar #> => new
			{
				<#
					foreach (PropertyMetadata property in properties) {
						if(property.PropertyName == "AuditDetail"){
						auditVariableName = property.PropertyName;
						continue;
						}		
						if (property.IsAssociation) {
						continue;
						}
						if (property.TypeName.Equals(datetimeType)){					
				#>
							<#= property.PropertyName #> = <#= lambdaVar #>.<#= property.PropertyName #>.ToShortDateISO(),
						<# } else if (property.TypeName.Equals(boolType)) { #>
							<#= property.PropertyName #> = (<#= lambdaVar #>.<#= property.PropertyName #> == null) ? "Not Applicable" : ((bool)<#= lambdaVar #>.<#= property.PropertyName #> ? "Yes" : "No"),
						<# } else { #>
							<#= property.PropertyName #> = <#= lambdaVar #>.<#= property.PropertyName #>,
					<# } #>
				<# } #>
				<#= auditVariableName #>_CreatedDate = <#= lambdaVar #>.<#= auditVariableName #>.CreatedDate.ToShortDateISO(),
                <#= auditVariableName #>_CreatedEntryUser = <#= lambdaVar #>.<#= auditVariableName #>.CreatedEntryUserDisplayName,
                <#= auditVariableName #>_LastModifiedDate = <#= lambdaVar #>.<#= auditVariableName #>.LastModifiedDate?.ToShortDateISO(),
                <#= auditVariableName #>_LastModifiedEntryUser = <#= lambdaVar #>.<#= auditVariableName #>.LastModifiedEntryUserDisplayName
			});				    
			<# } #>
		var TotalRecords = detailCollection.Count();
            return Json(new
            {
                iTotalRecords = TotalRecords,
                iTotalDisplayRecords = TotalRecords,
                aaData = detailCollection
            },
            JsonRequestBehavior.AllowGet);
	}

		// GET: <#= routePrefix #>/Details/5
		[HttpGet]
		[AuthorizeRoles(Role.Dev)]
<# if (UseAsync) { #>
        public async Task<ActionResult> Details(<#= primaryKeyNullableTypeName #> id)
<# } else { #>
        public ActionResult Details(<#= primaryKeyNullableTypeName #> id)
<# } #>
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
<# if (UseAsync) { #>
            <#= ModelTypeName #> <#= ModelVariable #> = await repo.FindByAsync(<#= lambdaVar #> => <#= lambdaVar #>.<#= PrimeID[0] #> == id);
<# } else { #>
            <#= ModelTypeName #> <#= ModelVariable #> = repo.FindBy(<#= lambdaVar #> => <#= lambdaVar #>.<#= PrimeID[0] #> == id);
<# } #>

            if (<#= ModelVariable #> == null)
            {
                return HttpNotFound();
            }
            return PartialView(<#= ModelVariable #>);
        }
		
<# foreach (var property in relatedProperties.Values) { #>
			
         private void viewBag<#= property.ForeignKeyPropertyNames[0] #>() =>   ViewBag.<#= property.ForeignKeyPropertyNames[0] #> = new SelectList(repo.Context.<#= property.EntitySetName #>, "<#= property.PrimaryKeyNames[0] #>", "<#= property.DisplayPropertyName #>");			
<# } #>	
		
        // GET: <#= routePrefix #>/Create
		[HttpGet]
		[AuthorizeRoles(Role.Dev)]
        public ActionResult Create()
        {
<# foreach (var property in relatedProperties.Values) { #>
            viewBag<#= property.ForeignKeyPropertyNames[0] #>();
<# } #>
            return View();
        }



        // POST: <#= routePrefix #>/Create

        [HttpPost]
		[AuthorizeRoles(Role.Dev)]
        [ValidateAntiForgeryToken]
<# if (UseAsync) { #>
        public async Task<ActionResult> Create(<#= bindAttribute #><#= ModelTypeName #> <#= ModelVariable #>)
<# } else { #>
        public ActionResult Create(<#= bindAttribute #><#= ModelTypeName #> <#= ModelVariable #>)
<# } #>
        {
			
            if (ModelState.IsValid)
            {
<# if(!String.IsNullOrEmpty(primaryKeyType) && String.Equals("System.Guid", primaryKeyType, StringComparison.OrdinalIgnoreCase)) { #>
                <#= ModelVariable #>.<#= primaryKeyName #> = Guid.NewGuid();
<# } #>
                repo.Add(<#= ModelVariable #>);
<# if (UseAsync) {#>
                await repo.SaveChangesAsync();
<# } else { #>
                repo.SaveChanges();
<# } #>
                return RedirectToAction("Index", new {id = <#= ModelVariable #>.<#= PrimeID[0] #>});
            }

<# foreach (var property in relatedProperties.Values) { #>
            viewBag<#= property.ForeignKeyPropertyNames[0] #>();
<# } #>

            return View(<#= ModelVariable #>);
        }

        // GET: <#= routePrefix #>/Edit/5
		[HttpGet]
		[AuthorizeRoles(Role.Dev)]
<# if (UseAsync) { #>
        public async Task<ActionResult> Edit(<#= primaryKeyNullableTypeName #> id)
<# } else { #>
        public ActionResult Edit(<#= primaryKeyNullableTypeName #> id)
<# } #>
        {
            if (modelID.check(id))
            {
                return RedirectToAction("Index", new { ErrorMessage = "ID Missing" });
            }
<# if (UseAsync) { #>
            <#= ModelTypeName #> <#= ModelVariable #> = await repo.FindByAsync(<#= lambdaVar #> => <#= lambdaVar #>.<#= PrimeID[0] #> == id);
<# } else { #>
            <#= ModelTypeName #> <#= ModelVariable #> = repo.FindBy(<#= lambdaVar #> => <#= lambdaVar #>.<#= PrimeID[0] #> == id);
<# } #>
            if (<#= ModelVariable #> == null)
            {
                return RedirectToAction("Index", new { ErrorMessage = "Bad ID" });
            }
<# foreach (var property in relatedProperties.Values) { #>
            viewBag<#= property.ForeignKeyPropertyNames[0] #>();
<# } #>
            return View(<#= ModelVariable #>);
        }

        // POST: <#= routePrefix #>/Edit/5

        [HttpPost]
		[AuthorizeRoles(Role.Dev)]
        [ValidateAntiForgeryToken]
<# if (UseAsync) { #>
        public async Task<ActionResult> Edit(<#= bindAttribute #><#= ModelTypeName #> <#= ModelVariable #>)
<# } else { #>
        public ActionResult Edit(<#= bindAttribute #><#= ModelTypeName #> <#= ModelVariable #>)
<# } #>
        {
			
            if (ModelState.IsValid)
            {
				var pre<#= ModelTypeName #> = repo.FindBy(<#= lambdaVar #> => <#= lambdaVar #>.<#=PrimeID[0] #> == <#= ModelVariable #>.<#=PrimeID[0] #>);
				
				<# foreach (PropertyMetadata property in properties) {		
				if(property.PropertyName == "AuditDetail") {
					continue;
				}
				
				if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {
					// We do not want to show any association properties for which there is
					// no associated foreign key.
					if (property.IsAssociation) {
						continue;
					}
				#>
				pre<#= ModelTypeName #>.<#=property.PropertyName #> = <#= ModelVariable #>.<#= property.PropertyName #>;
				<# }} #>
                repo.Edit(pre<#= ModelTypeName #>);
<# if (UseAsync) { #>
                await repo.SaveChangesAsync();
<# } else { #>
                repo.SaveChanges();
<# } #>
                return RedirectToAction("Index", new { id = pre<#= ModelTypeName #>.<#=PrimeID[0] #> });
            }
<# foreach (var property in relatedProperties.Values) { #>
            viewBag<#= property.ForeignKeyPropertyNames[0] #>();
<# } #>		
			return View(<#= ModelVariable #>);
			
            
        }

        // GET: <#= routePrefix #>/Delete/5
		[HttpGet]
		[AuthorizeRoles(Role.Dev)]
<# if (UseAsync) { #>
        public async Task<ActionResult> Delete(<#= primaryKeyNullableTypeName #> id)
<# } else { #>
        public ActionResult Delete(<#= primaryKeyNullableTypeName #> id)
<# } #>
        {
            if (modelID.check(id))
            {
                return RedirectToAction("Index", new { ErrorMessage = "ID Missing" });
            }
<# if (UseAsync) { #>
            <#= ModelTypeName #> <#= ModelVariable #> = await repo.FindByAsync(<#= lambdaVar #> => <#= lambdaVar #>.<#= PrimeID[0] #> == id);
<# } else { #>
            <#= ModelTypeName #> <#= ModelVariable #> = repo.FindBy(<#= lambdaVar #> => <#= lambdaVar #>.<#= PrimeID[0] #> == id);
<# } #>
            if (<#= ModelVariable #> == null)
            {
                return RedirectToAction("Index", new { ErrorMessage = "Bad ID" });
            }
            return View(<#= ModelVariable #>);
        }

        // POST: <#= routePrefix #>/Delete/5
        [HttpPost, ActionName("Delete")]
		[AuthorizeRoles(Role.Dev)]
        [ValidateAntiForgeryToken]
<# if (UseAsync) { #>
        public async Task<ActionResult> DeleteConfirmed(<#= primaryKeyShortTypeName #> id)
<# } else { #>
        public ActionResult DeleteConfirmed(<#= primaryKeyShortTypeName #> id)
<# } #>
        {
<# if (UseAsync) { #>
            <#= ModelTypeName #> <#= ModelVariable #> = await repo.FindByAsync(<#= lambdaVar #> => <#= lambdaVar #>.<#= PrimeID[0] #> == id);
<# } else { #>
            <#= ModelTypeName #> <#= ModelVariable #> = repo.FindBy(<#= lambdaVar #> => <#= lambdaVar #>.<#= PrimeID[0] #> == id);
<# } #> 
			repo.Delete(<#= ModelVariable #>);
<# if (UseAsync) { #>
            await repo.SaveChangesAsync();
<# } else { #>
            repo.SaveChanges();
<# } #>		
			return RedirectToAction("Index");

            
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                repo.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
<#+
// This function converts the primary key short type name to its nullable equivalent when possible. This is required to make
// sure that an HTTP 400 error is thrown when the user tries to access the edit, delete, or details action with null values.
    string GetNullableTypeName(string typeName, string shortTypeName)
    {
        // The exceptions are caught because if for any reason the type is user defined, then the short type name will be used.
        // In that case the user will receive a server error if null is passed to the edit, delete, or details actions.
        Type primaryKeyType = null;
        try
        {
            primaryKeyType = Type.GetType(typeName);
        }
        catch
        {
        }
        if (primaryKeyType != null && (primaryKeyType.IsPrimitive || IsGuid(typeName)))
        {
            return shortTypeName + "?";
        }
        return shortTypeName;
    }

    bool IsGuid(string typeName) {
        return String.Equals("System.Guid", typeName, StringComparison.OrdinalIgnoreCase);
    }
#>